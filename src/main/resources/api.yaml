openapi: "3.0.3"
info:
  title: Biblioteca API
  description: API para gerenciar organizações
  version: 1.0.0

tags:
  - name: Auth
    description: Operações relacionadas a autenticação
  - name: chat
    description: Operações relacionadas a chat
  - name: Organização
    description: Operações relacionadas a organizações
  - name: Usuario
    description: Operações relacionadas a usuários
  - name: Endereço
    description: Operações relacionadas a endereços
  - name: Perfil
    description: Operações relacionadas a perfis
  - name: Unidade Federativa
    description: Operações relacionadas a Unidades Federativas
  - name: Senha
    description: Operações relacionadas a senha de acesso do usuário

paths:
  /auth/revoke:
    post:
      summary: Revoke token
      description: Revoke the authorization token.
      tags:
        - Auth
      operationId: revokeToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOi"
      responses:
        '200':
          description: Token revoked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token revoked successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request."
  /auth/verify-authorization:
    get:
      summary: Verify authorization endpoint
      description: Verifica a autorização do token.
      tags:
        - Auth
      operationId: verifyAuthorization
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token válido
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: Token inválido ou ausente
          content:
            application/json:
              schema:
                type: boolean
                example: false
  /auth/login:
    post:
      summary: Login endpoint
      description: Endpoint para autenticação de usuários.
      tags:
        - Auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDTO'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Credenciais inválidas."
  /auth/register:
    post:
      summary: Register endpoint
      description: Endpoint para registrar novos usuários.
      tags:
        - Auth
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDTO'
      responses:
        '200':
          description: Registro bem-sucedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDTO'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuário já cadastrado."
  /chat/generate:
    post:
      summary:  Generate endpoint
      description: Endpoint para gerar resposta baseada no modelo e prompt fornecidos.
      tags:
        - chat
      operationId: generate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequestDTO'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponseDTO'
  /organizacao/find:
    post:
      summary: Busca Organizações
      security:
        - bearerAuth: []
      tags:
        - Organização
      operationId: findOrganizacao
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizacaoRequest'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizacaoResponseDTO'
  /organizacao/detail/{id}:
    get:
      summary: Detalha  uma organização
      security:
        - bearerAuth: []
      tags:
        - Organização
      operationId: detailOrganizacao
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizacaoResponseDTO'
  /organizacao/create:
    put:
      summary: Cria uma organização
      security:
        - bearerAuth: []
      tags:
        - Organização
      operationId: createOrganizacao
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizacaoRequestDTO'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizacaoModel'
  /organizacao/update:
    patch:
      summary: Atualiza uma organização
      security:
        - bearerAuth: []
      tags:
        - Organização
      operationId: updateOrganizacao
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizacaoModel'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizacaoModel'
  /organizacao/delete/{id}:
    delete:
      summary: Deleta uma organização
      security:
        - bearerAuth: []
      tags:
        - Organização
      operationId: deleteOrganizacao
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content

  /usuario/find:
    post:
      summary: Busca usuários
      security:
        - bearerAuth: []
      tags:
        - Usuario
      operationId: findUsuario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioRequest'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponseDTO'
  /usuario/detail/{id}:
    get:
      summary: Detalha  um usuário
      security:
        - bearerAuth: []
      tags:
        - Usuario
      operationId: detailUsuario
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponseDTO'
  /usuario/create:
    put:
      summary: Cria um usuário
      security:
        - bearerAuth: []
      tags:
        - Usuario
      operationId: createUsuario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDTO'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioModel'
  /usuario/update:
    patch:
      summary: Atualiza um usuário
      security:
          - bearerAuth: []
      tags:
        - Usuario
      operationId: updateUsuario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioModel'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioModel'
  /usuario/delete/{id}:
    delete:
      summary: Deleta um usuário
      security:
          - bearerAuth: []
      tags:
        - Usuario
      operationId: deleteUsuario
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
  /endereco:
    post:
      summary: Cria um novo endereço
      security:
        - bearerAuth: []
      tags:
        - Endereço
      operationId: createEndereco
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnderecoModel'
      responses:
        '200':
          description: Endereço criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnderecoModel'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Endereço não criado."
        '500':
          description: Erro interno
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erro interno."
  /endereco/{id}:
    put:
      summary: Atualiza um endereço existente
      operationId: updateEndereco
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnderecoModel'
      responses:
        '200':
          description: Endereço atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnderecoModel'
        '404':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Endereço não encontrado."
        '500':
          description: Erro interno
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erro interno."
    get:
      summary: Detalha um endereço
      security:
        - bearerAuth: []
      tags:
        - Endereço
      operationId: detailEndereco
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnderecoModel'
    delete:
      summary: Deleta um endereço existente
      operationId: deleteEndereco
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Endereço excluído com sucesso
        '404':
          description: Endereço não encontrado
        '500':
          description: Erro interno do servidor
  /endereco/find:
    get:
      summary: Busca Enderecos
      security:
        - bearerAuth: []
      tags:
        - Perfil
      operationId: findEndereco
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnderecoModel'
  /perfil/find:
    get:
      summary: Busca Perfis
      security:
        - bearerAuth: []
      tags:
        - Perfil
      operationId: findPerfil
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerfilModel'
  /senha/recuperar:
    post:
      summary: Gera link de recuperação de senha
      description: Recebe o e-mail do usuário e envia um link de recuperação com token válido por 10 minutos.
      tags:
        - Senha
      operationId: recuperarSenha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "usuario@exemplo.com"
      responses:
        '200':
          description: Link de recuperação enviado ao e-mail.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Link de recuperação enviado ao e-mail."
        '404':
          description: Usuário não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuário não encontrado."
  /senha/validar-reset-token:
    get:
      summary: Valida token de recuperação de senha
      description: Valida o token de recuperação de senha e retorna o e-mail do usuário.
      tags:
        - Senha
      operationId: validarResetToken
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
            example: "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c3VhcmlvQGV4Y2xlbW8uY29tIiwiZXhwIjoxNjI5MzQwNjY5fQ.1Z6"
      responses:
        '200':
          description: Token válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  email:
                    type: string
                    example: "usuario@exemplo.com"
                  nome:
                    type: string
                    example: "Usuário Exemplo"
        '404':
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Token inválido."
  /senha/salvar:
    post:
      summary: Salvar senha do usuário
      description: Recebe o e-mail do usuário e a nova senha.
      tags:
        - Senha
      operationId: salvarSenha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "usuario@exemplo.com"
                senha:
                    type: string
                    example: "novaSenha"
                repeatSenha:
                    type: string
                    example: "novaSenha"
                token:
                    type: string
                    example: "eyJhbGciOi"
      responses:
        '200':
          description: Senha alterada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Senha alterada com sucesso."
        '404':
          description: Senha não salva.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Senha não salva."
  /unidade-federativa/find:
    post:
      summary: Busca unidades federativas
      security:
        - bearerAuth: []
      tags:
        - Unidade Federativa
      operationId: findUF
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnidadeFederativaRequest'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnidadeFederativaResponseDTO'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Especifica o formato do token, pode ser omitido
  schemas:
    ChatRequestDTO:
      type: object
      properties:
        model:
          type: string
        prompt:
          type: string
    LoginRequestDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        senha:
          type: string
    OrganizacaoRequest:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        nif:
          type: string
        email:
          type: string
        website:
          type: string
        setorAtividade:
          type: string
        limit:
          type: integer
        offset:
          type: integer
        event:
          type: object
          $ref: '#/components/schemas/EventPagination'
    OrganizacaoRequestDTO:
        type: object
        properties:
            id:
              type: integer
            nome:
              type: string
            nif:
              type: string
            email:
              type: string
            website:
              type: string
            setorAtividade:
              type: string
            missao:
              type: string
            representante_legal:
              type: string
            cargo:
              type: string
            numero_registo_comercial:
              type: string
            data_registo:
              type: string
              format: date
    UsuarioRequest:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
        dataNascimento:
          type: string
          format: date
        limit:
            type: integer
        offset:
          type: integer
        event:
          type: object
          $ref: '#/components/schemas/EventPagination'
    EventPagination:
      type: object
      properties:
        length:
          type: integer
        pageIndex:
          type: integer
        pageSize:
            type: integer
        previousPageIndex:
            type: integer

    UnidadeFederativaRequest:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        sigla:
          type: string
        limit:
          type: integer
        offset:
          type: integer
    ChatResponseDTO:
        type: object
        properties:
            model:
              type: string
            createdAt:
              type: string
            response:
              type: string
            done:
                type: boolean
    LoginResponseDTO:
      type: object
      properties:
        nome:
          type: string
        authorization:
          type: string
    UsuarioResponseDTO:
      type: object
      properties:
        usuarios:
          type: array
          items:
            $ref: '#/components/schemas/UsuarioModel'
        totalRecords:
          type: integer
    OrganizacaoResponseDTO:
      type: object
      properties:
        organizacoes:
          type: array
          items:
            $ref: '#/components/schemas/OrganizacaoModel'
        totalRecords:
          type: integer
    UnidadeFederativaResponseDTO:
      type: object
      properties:
        ufs:
          type: array
          items:
            $ref: '#/components/schemas/UnidadeFederativaModel'
        totalRecords:
          type: integer
    RegisterRequestDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
        senha:
          type: string
        dataNascimento:
          type: string
          format: date
        enderecos:
          type: array
          items:
            $ref: '#/components/schemas/EnderecoModel'
        perfis:
          type: array
          items:
            $ref: '#/components/schemas/PerfilModel'
    OrganizacaoModel:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        nif:
          type: string
        email:
          type: string
        website:
          type: string
        setorAtividade:
            type: string
        missao:
            type: string
        representante_legal:
            type: string
        cargo:
            type: string
        numero_registo_comercial:
            type: string
        data_registo:
            type: string
            format: date
    UsuarioModel:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        senha:
          type: string
        email:
          type: string
        dataNascimento:
          type: string
        enderecos:
          type: array
          items:
            $ref: '#/components/schemas/EnderecoModel'
        perfis:
            type: array
            items:
                $ref: '#/components/schemas/PerfilModel'
    EnderecoModel:
      type: object
      properties:
        id:
          type: integer
        logradouro:
          type: string
        numero:
          type: integer
        complemento:
            type: string
        bairro:
          type: string
        cidade:
          type: string
        uf:
          $ref: '#/components/schemas/UnidadeFederativaModel'
        cep:
          type: string
    PerfilModel:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
    UnidadeFederativaModel:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        sigla:
            type: string


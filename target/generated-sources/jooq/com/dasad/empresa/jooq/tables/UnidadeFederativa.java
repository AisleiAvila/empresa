/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Endereco.EnderecoPath;
import com.dasad.empresa.jooq.tables.records.UnidadeFederativaRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UnidadeFederativa extends TableImpl<UnidadeFederativaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.unidade_federativa</code>
     */
    public static final UnidadeFederativa UNIDADE_FEDERATIVA = new UnidadeFederativa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnidadeFederativaRecord> getRecordType() {
        return UnidadeFederativaRecord.class;
    }

    /**
     * The column <code>public.unidade_federativa.id</code>.
     */
    public final TableField<UnidadeFederativaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.unidade_federativa.nome</code>.
     */
    public final TableField<UnidadeFederativaRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.unidade_federativa.sigla</code>.
     */
    public final TableField<UnidadeFederativaRecord, String> SIGLA = createField(DSL.name("sigla"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    private UnidadeFederativa(Name alias, Table<UnidadeFederativaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UnidadeFederativa(Name alias, Table<UnidadeFederativaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.unidade_federativa</code> table reference
     */
    public UnidadeFederativa(String alias) {
        this(DSL.name(alias), UNIDADE_FEDERATIVA);
    }

    /**
     * Create an aliased <code>public.unidade_federativa</code> table reference
     */
    public UnidadeFederativa(Name alias) {
        this(alias, UNIDADE_FEDERATIVA);
    }

    /**
     * Create a <code>public.unidade_federativa</code> table reference
     */
    public UnidadeFederativa() {
        this(DSL.name("unidade_federativa"), null);
    }

    public <O extends Record> UnidadeFederativa(Table<O> path, ForeignKey<O, UnidadeFederativaRecord> childPath, InverseForeignKey<O, UnidadeFederativaRecord> parentPath) {
        super(path, childPath, parentPath, UNIDADE_FEDERATIVA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UnidadeFederativaPath extends UnidadeFederativa implements Path<UnidadeFederativaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UnidadeFederativaPath(Table<O> path, ForeignKey<O, UnidadeFederativaRecord> childPath, InverseForeignKey<O, UnidadeFederativaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UnidadeFederativaPath(Name alias, Table<UnidadeFederativaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UnidadeFederativaPath as(String alias) {
            return new UnidadeFederativaPath(DSL.name(alias), this);
        }

        @Override
        public UnidadeFederativaPath as(Name alias) {
            return new UnidadeFederativaPath(alias, this);
        }

        @Override
        public UnidadeFederativaPath as(Table<?> alias) {
            return new UnidadeFederativaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UnidadeFederativaRecord, Integer> getIdentity() {
        return (Identity<UnidadeFederativaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UnidadeFederativaRecord> getPrimaryKey() {
        return Keys.UNIDADE_FEDERATIVA_PKEY;
    }

    private transient EnderecoPath _endereco;

    /**
     * Get the implicit to-many join path to the <code>public.endereco</code>
     * table
     */
    public EnderecoPath endereco() {
        if (_endereco == null)
            _endereco = new EnderecoPath(this, null, Keys.ENDERECO__FKSBFB2MDC0HMIXWPUD2D8O8QOY.getInverseKey());

        return _endereco;
    }

    @Override
    public UnidadeFederativa as(String alias) {
        return new UnidadeFederativa(DSL.name(alias), this);
    }

    @Override
    public UnidadeFederativa as(Name alias) {
        return new UnidadeFederativa(alias, this);
    }

    @Override
    public UnidadeFederativa as(Table<?> alias) {
        return new UnidadeFederativa(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnidadeFederativa rename(String name) {
        return new UnidadeFederativa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnidadeFederativa rename(Name name) {
        return new UnidadeFederativa(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnidadeFederativa rename(Table<?> name) {
        return new UnidadeFederativa(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnidadeFederativa where(Condition condition) {
        return new UnidadeFederativa(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnidadeFederativa where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnidadeFederativa where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnidadeFederativa where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UnidadeFederativa where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UnidadeFederativa where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UnidadeFederativa where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UnidadeFederativa where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnidadeFederativa whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnidadeFederativa whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

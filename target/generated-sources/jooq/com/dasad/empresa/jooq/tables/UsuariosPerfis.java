/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Perfis.PerfisPath;
import com.dasad.empresa.jooq.tables.Usuario.UsuarioPath;
import com.dasad.empresa.jooq.tables.records.UsuariosPerfisRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UsuariosPerfis extends TableImpl<UsuariosPerfisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.usuarios_perfis</code>
     */
    public static final UsuariosPerfis USUARIOS_PERFIS = new UsuariosPerfis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsuariosPerfisRecord> getRecordType() {
        return UsuariosPerfisRecord.class;
    }

    /**
     * The column <code>public.usuarios_perfis.usuario_id</code>.
     */
    public final TableField<UsuariosPerfisRecord, Integer> USUARIO_ID = createField(DSL.name("usuario_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.usuarios_perfis.perfil_id</code>.
     */
    public final TableField<UsuariosPerfisRecord, Integer> PERFIL_ID = createField(DSL.name("perfil_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private UsuariosPerfis(Name alias, Table<UsuariosPerfisRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UsuariosPerfis(Name alias, Table<UsuariosPerfisRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.usuarios_perfis</code> table reference
     */
    public UsuariosPerfis(String alias) {
        this(DSL.name(alias), USUARIOS_PERFIS);
    }

    /**
     * Create an aliased <code>public.usuarios_perfis</code> table reference
     */
    public UsuariosPerfis(Name alias) {
        this(alias, USUARIOS_PERFIS);
    }

    /**
     * Create a <code>public.usuarios_perfis</code> table reference
     */
    public UsuariosPerfis() {
        this(DSL.name("usuarios_perfis"), null);
    }

    public <O extends Record> UsuariosPerfis(Table<O> path, ForeignKey<O, UsuariosPerfisRecord> childPath, InverseForeignKey<O, UsuariosPerfisRecord> parentPath) {
        super(path, childPath, parentPath, USUARIOS_PERFIS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsuariosPerfisPath extends UsuariosPerfis implements Path<UsuariosPerfisRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsuariosPerfisPath(Table<O> path, ForeignKey<O, UsuariosPerfisRecord> childPath, InverseForeignKey<O, UsuariosPerfisRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsuariosPerfisPath(Name alias, Table<UsuariosPerfisRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsuariosPerfisPath as(String alias) {
            return new UsuariosPerfisPath(DSL.name(alias), this);
        }

        @Override
        public UsuariosPerfisPath as(Name alias) {
            return new UsuariosPerfisPath(alias, this);
        }

        @Override
        public UsuariosPerfisPath as(Table<?> alias) {
            return new UsuariosPerfisPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsuariosPerfisRecord> getPrimaryKey() {
        return Keys.USUARIOS_PERFIS_PKEY;
    }

    @Override
    public List<ForeignKey<UsuariosPerfisRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USUARIOS_PERFIS__USUARIOS_PERFIS_USUARIO_ID_FKEY, Keys.USUARIOS_PERFIS__USUARIOS_PERFIS_PERFIL_ID_FKEY);
    }

    private transient UsuarioPath _usuario;

    /**
     * Get the implicit join path to the <code>public.usuario</code> table.
     */
    public UsuarioPath usuario() {
        if (_usuario == null)
            _usuario = new UsuarioPath(this, Keys.USUARIOS_PERFIS__USUARIOS_PERFIS_USUARIO_ID_FKEY, null);

        return _usuario;
    }

    private transient PerfisPath _perfis;

    /**
     * Get the implicit join path to the <code>public.perfis</code> table.
     */
    public PerfisPath perfis() {
        if (_perfis == null)
            _perfis = new PerfisPath(this, Keys.USUARIOS_PERFIS__USUARIOS_PERFIS_PERFIL_ID_FKEY, null);

        return _perfis;
    }

    @Override
    public UsuariosPerfis as(String alias) {
        return new UsuariosPerfis(DSL.name(alias), this);
    }

    @Override
    public UsuariosPerfis as(Name alias) {
        return new UsuariosPerfis(alias, this);
    }

    @Override
    public UsuariosPerfis as(Table<?> alias) {
        return new UsuariosPerfis(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsuariosPerfis rename(String name) {
        return new UsuariosPerfis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsuariosPerfis rename(Name name) {
        return new UsuariosPerfis(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsuariosPerfis rename(Table<?> name) {
        return new UsuariosPerfis(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsuariosPerfis where(Condition condition) {
        return new UsuariosPerfis(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsuariosPerfis where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsuariosPerfis where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsuariosPerfis where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsuariosPerfis where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsuariosPerfis where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsuariosPerfis where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsuariosPerfis where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsuariosPerfis whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsuariosPerfis whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

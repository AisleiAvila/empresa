/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Usuario.UsuarioPath;
import com.dasad.empresa.jooq.tables.UsuariosPerfis.UsuariosPerfisPath;
import com.dasad.empresa.jooq.tables.records.PerfisRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Perfis extends TableImpl<PerfisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.perfis</code>
     */
    public static final Perfis PERFIS = new Perfis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PerfisRecord> getRecordType() {
        return PerfisRecord.class;
    }

    /**
     * The column <code>public.perfis.id</code>.
     */
    public final TableField<PerfisRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.perfis.nome</code>.
     */
    public final TableField<PerfisRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Perfis(Name alias, Table<PerfisRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Perfis(Name alias, Table<PerfisRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.perfis</code> table reference
     */
    public Perfis(String alias) {
        this(DSL.name(alias), PERFIS);
    }

    /**
     * Create an aliased <code>public.perfis</code> table reference
     */
    public Perfis(Name alias) {
        this(alias, PERFIS);
    }

    /**
     * Create a <code>public.perfis</code> table reference
     */
    public Perfis() {
        this(DSL.name("perfis"), null);
    }

    public <O extends Record> Perfis(Table<O> path, ForeignKey<O, PerfisRecord> childPath, InverseForeignKey<O, PerfisRecord> parentPath) {
        super(path, childPath, parentPath, PERFIS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PerfisPath extends Perfis implements Path<PerfisRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PerfisPath(Table<O> path, ForeignKey<O, PerfisRecord> childPath, InverseForeignKey<O, PerfisRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PerfisPath(Name alias, Table<PerfisRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PerfisPath as(String alias) {
            return new PerfisPath(DSL.name(alias), this);
        }

        @Override
        public PerfisPath as(Name alias) {
            return new PerfisPath(alias, this);
        }

        @Override
        public PerfisPath as(Table<?> alias) {
            return new PerfisPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PerfisRecord, Integer> getIdentity() {
        return (Identity<PerfisRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PerfisRecord> getPrimaryKey() {
        return Keys.PERFIS_PKEY;
    }

    private transient UsuariosPerfisPath _usuariosPerfis;

    /**
     * Get the implicit to-many join path to the
     * <code>public.usuarios_perfis</code> table
     */
    public UsuariosPerfisPath usuariosPerfis() {
        if (_usuariosPerfis == null)
            _usuariosPerfis = new UsuariosPerfisPath(this, null, Keys.USUARIOS_PERFIS__USUARIOS_PERFIS_PERFIL_ID_FKEY.getInverseKey());

        return _usuariosPerfis;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.usuario</code> table
     */
    public UsuarioPath usuario() {
        return usuariosPerfis().usuario();
    }

    @Override
    public Perfis as(String alias) {
        return new Perfis(DSL.name(alias), this);
    }

    @Override
    public Perfis as(Name alias) {
        return new Perfis(alias, this);
    }

    @Override
    public Perfis as(Table<?> alias) {
        return new Perfis(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Perfis rename(String name) {
        return new Perfis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Perfis rename(Name name) {
        return new Perfis(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Perfis rename(Table<?> name) {
        return new Perfis(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfis where(Condition condition) {
        return new Perfis(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfis where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfis where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfis where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Perfis where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Perfis where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Perfis where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Perfis where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfis whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfis whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Pedidos.PedidosPath;
import com.dasad.empresa.jooq.tables.records.ItensPedidosRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ItensPedidos extends TableImpl<ItensPedidosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.itens_pedidos</code>
     */
    public static final ItensPedidos ITENS_PEDIDOS = new ItensPedidos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItensPedidosRecord> getRecordType() {
        return ItensPedidosRecord.class;
    }

    /**
     * The column <code>public.itens_pedidos.id</code>.
     */
    public final TableField<ItensPedidosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.itens_pedidos.id_pedido</code>.
     */
    public final TableField<ItensPedidosRecord, Integer> ID_PEDIDO = createField(DSL.name("id_pedido"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.itens_pedidos.nome_produto</code>.
     */
    public final TableField<ItensPedidosRecord, String> NOME_PRODUTO = createField(DSL.name("nome_produto"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.itens_pedidos.quantidade</code>.
     */
    public final TableField<ItensPedidosRecord, Integer> QUANTIDADE = createField(DSL.name("quantidade"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.itens_pedidos.valor_total</code>.
     */
    public final TableField<ItensPedidosRecord, BigDecimal> VALOR_TOTAL = createField(DSL.name("valor_total"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    private ItensPedidos(Name alias, Table<ItensPedidosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ItensPedidos(Name alias, Table<ItensPedidosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.itens_pedidos</code> table reference
     */
    public ItensPedidos(String alias) {
        this(DSL.name(alias), ITENS_PEDIDOS);
    }

    /**
     * Create an aliased <code>public.itens_pedidos</code> table reference
     */
    public ItensPedidos(Name alias) {
        this(alias, ITENS_PEDIDOS);
    }

    /**
     * Create a <code>public.itens_pedidos</code> table reference
     */
    public ItensPedidos() {
        this(DSL.name("itens_pedidos"), null);
    }

    public <O extends Record> ItensPedidos(Table<O> path, ForeignKey<O, ItensPedidosRecord> childPath, InverseForeignKey<O, ItensPedidosRecord> parentPath) {
        super(path, childPath, parentPath, ITENS_PEDIDOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ItensPedidosPath extends ItensPedidos implements Path<ItensPedidosRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ItensPedidosPath(Table<O> path, ForeignKey<O, ItensPedidosRecord> childPath, InverseForeignKey<O, ItensPedidosRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ItensPedidosPath(Name alias, Table<ItensPedidosRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ItensPedidosPath as(String alias) {
            return new ItensPedidosPath(DSL.name(alias), this);
        }

        @Override
        public ItensPedidosPath as(Name alias) {
            return new ItensPedidosPath(alias, this);
        }

        @Override
        public ItensPedidosPath as(Table<?> alias) {
            return new ItensPedidosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ItensPedidosRecord, Integer> getIdentity() {
        return (Identity<ItensPedidosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ItensPedidosRecord> getPrimaryKey() {
        return Keys.ITENS_PEDIDOS_PKEY;
    }

    @Override
    public List<ForeignKey<ItensPedidosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ITENS_PEDIDOS__FK_PEDIDO);
    }

    private transient PedidosPath _pedidos;

    /**
     * Get the implicit join path to the <code>public.pedidos</code> table.
     */
    public PedidosPath pedidos() {
        if (_pedidos == null)
            _pedidos = new PedidosPath(this, Keys.ITENS_PEDIDOS__FK_PEDIDO, null);

        return _pedidos;
    }

    @Override
    public ItensPedidos as(String alias) {
        return new ItensPedidos(DSL.name(alias), this);
    }

    @Override
    public ItensPedidos as(Name alias) {
        return new ItensPedidos(alias, this);
    }

    @Override
    public ItensPedidos as(Table<?> alias) {
        return new ItensPedidos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItensPedidos rename(String name) {
        return new ItensPedidos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItensPedidos rename(Name name) {
        return new ItensPedidos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItensPedidos rename(Table<?> name) {
        return new ItensPedidos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItensPedidos where(Condition condition) {
        return new ItensPedidos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItensPedidos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItensPedidos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItensPedidos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItensPedidos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItensPedidos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItensPedidos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItensPedidos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItensPedidos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItensPedidos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

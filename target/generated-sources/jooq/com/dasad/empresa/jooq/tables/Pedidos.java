/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.ItensPedidos.ItensPedidosPath;
import com.dasad.empresa.jooq.tables.records.PedidosRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Pedidos extends TableImpl<PedidosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pedidos</code>
     */
    public static final Pedidos PEDIDOS = new Pedidos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PedidosRecord> getRecordType() {
        return PedidosRecord.class;
    }

    /**
     * The column <code>public.pedidos.id</code>.
     */
    public final TableField<PedidosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pedidos.comprador</code>.
     */
    public final TableField<PedidosRecord, String> COMPRADOR = createField(DSL.name("comprador"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.pedidos.fornecedor</code>.
     */
    public final TableField<PedidosRecord, String> FORNECEDOR = createField(DSL.name("fornecedor"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.pedidos.total_produtos</code>.
     */
    public final TableField<PedidosRecord, Integer> TOTAL_PRODUTOS = createField(DSL.name("total_produtos"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pedidos.valor_total</code>.
     */
    public final TableField<PedidosRecord, BigDecimal> VALOR_TOTAL = createField(DSL.name("valor_total"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    private Pedidos(Name alias, Table<PedidosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Pedidos(Name alias, Table<PedidosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.pedidos</code> table reference
     */
    public Pedidos(String alias) {
        this(DSL.name(alias), PEDIDOS);
    }

    /**
     * Create an aliased <code>public.pedidos</code> table reference
     */
    public Pedidos(Name alias) {
        this(alias, PEDIDOS);
    }

    /**
     * Create a <code>public.pedidos</code> table reference
     */
    public Pedidos() {
        this(DSL.name("pedidos"), null);
    }

    public <O extends Record> Pedidos(Table<O> path, ForeignKey<O, PedidosRecord> childPath, InverseForeignKey<O, PedidosRecord> parentPath) {
        super(path, childPath, parentPath, PEDIDOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PedidosPath extends Pedidos implements Path<PedidosRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PedidosPath(Table<O> path, ForeignKey<O, PedidosRecord> childPath, InverseForeignKey<O, PedidosRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PedidosPath(Name alias, Table<PedidosRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PedidosPath as(String alias) {
            return new PedidosPath(DSL.name(alias), this);
        }

        @Override
        public PedidosPath as(Name alias) {
            return new PedidosPath(alias, this);
        }

        @Override
        public PedidosPath as(Table<?> alias) {
            return new PedidosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PedidosRecord, Integer> getIdentity() {
        return (Identity<PedidosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PedidosRecord> getPrimaryKey() {
        return Keys.PEDIDOS_PKEY;
    }

    private transient ItensPedidosPath _itensPedidos;

    /**
     * Get the implicit to-many join path to the
     * <code>public.itens_pedidos</code> table
     */
    public ItensPedidosPath itensPedidos() {
        if (_itensPedidos == null)
            _itensPedidos = new ItensPedidosPath(this, null, Keys.ITENS_PEDIDOS__FK_PEDIDO.getInverseKey());

        return _itensPedidos;
    }

    @Override
    public Pedidos as(String alias) {
        return new Pedidos(DSL.name(alias), this);
    }

    @Override
    public Pedidos as(Name alias) {
        return new Pedidos(alias, this);
    }

    @Override
    public Pedidos as(Table<?> alias) {
        return new Pedidos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pedidos rename(String name) {
        return new Pedidos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pedidos rename(Name name) {
        return new Pedidos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pedidos rename(Table<?> name) {
        return new Pedidos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedidos where(Condition condition) {
        return new Pedidos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedidos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedidos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedidos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pedidos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pedidos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pedidos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pedidos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedidos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedidos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
